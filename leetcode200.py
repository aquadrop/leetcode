from queue import Queue

class Solution:
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if len(grid) == 0:
            return 0
        visited = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]
        count = 0
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if visited[x][y] == 0 and grid[x][y] == '1':
                    count += 1
                    q = Queue()
                    self.BFS(x, y, grid, visited, q)
        return count

    def BFS(self, x, y, grid, visited, q):
        if visited[x][y] == 1 or grid[x][y] == '0':
            return
        q.put_nowait([x, y])
        visited[x][y] = 1
        while q.qsize() > 0:
            a, b = q.get_nowait()
            # print(q.qsize())
            if a - 1 >= 0 and grid[a-1][b] == '1' and visited[a-1][b] == 0:
                visited[a-1][b]=1
                q.put([a-1, b])
            if b - 1 >= 0 and grid[a][b-1] == '1' and visited[a][b-1] == 0:
                visited[a][b-1] = 1
                q.put([a, b-1])
            if a + 1 <= len(grid) - 1 and grid[a+1][b] == '1' and visited[a+1][b] == 0:
                visited[a+1][b] = 1
                q.put([a+1, b])
            if b+1 <= len(grid[0]) - 1 and grid[a][b+1] == '1' and visited[a][b+1] == 0:
                visited[a][b+1] = 1
                q.put([a, b+1])

if __name__ == '__main__':
    S = Solution()


    print(S.numIslands([['1','1','0','0','0'],
['1','1','0','0','0'],
['0','0','1','0','0'],
['0','0','0','1','1']]))
    a = [["0","1","0"],["1","0","1"],["0","1","0"]]
    print(S.numIslands(a))
    a = [['1','1','0','0','0'],
 ['1','1','0','0','0'],
 ['0','0','1','0','0'],
 ['0','0','0','1','1']]
    print(S.numIslands(a))
    a = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
    print(len(a), len(a[0]))
    print(S.numIslands(a))